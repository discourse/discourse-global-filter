# frozen_string_literal: true

require "rails_helper"

describe GlobalFilter::FilterTagsController do
  fab!(:admin) { Fabricate(:admin) }
  fab!(:user) { Fabricate(:user) }
  fab!(:tag) { Fabricate(:tag) }
  fab!(:second_tag) { Fabricate(:tag) }
  fab!(:filter_tag) { Fabricate(:filter_tag, name: tag.name) }

  before { SiteSetting.discourse_global_filter_enabled = true }

  describe "#set_filter_children_for_tag" do
    it "is not accessbile to non-staff users" do
      sign_in(user)
      post "/admin/plugins/filter_tags/#{tag.name}/set_filter_children_for_tag.json"
      expect(response.status).to eq(404)
    end

    it "requires a filter child to be passed" do
      sign_in(admin)
      post "/admin/plugins/filter_tags/#{tag.name}/set_filter_children_for_tag.json",
          params: { child_tag: nil }

      expect(response.status).to eq(400)
      expect(response.body).to include(
        "param is missing or the value is empty: child_tag",
      )
    end

    it "requires a filter child to be passed" do
      sign_in(admin)
      post "/admin/plugins/filter_tags/#{tag.name}/set_filter_children_for_tag.json",
          params: { child_tag: nil }

      expect(response.status).to eq(400)
      expect(response.body).to include(
        "param is missing or the value is empty: child_tag",
      )
    end

    it "requires a filter child to be passed" do
      sign_in(admin)
      post "/admin/plugins/filter_tags/#{tag.name}/set_filter_children_for_tag.json",
          params: { child_tag: nil }

      expect(response.status).to eq(400)
      expect(response.body).to include(
        "param is missing or the value is empty: child_tag",
      )
    end

    it "adds the filter child to filter_children" do
      sign_in(admin)
      expect(filter_tag.filter_children).to_not be_present
      post "/admin/plugins/filter_tags/#{tag.name}/set_filter_children_for_tag.json",
          params: { child_tag: second_tag }

      expect(response.status).to eq(200)
      expect(filter_tag.reload.filter_children).to be_present
      expect(filter_tag.filter_children).to eq({})
    end
  end
end
